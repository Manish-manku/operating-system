2) (ii)
(i)fork()

#include <iostream>
#include <unistd.h>
using namespace std;
int main() {
    pid_t child_pid = fork();

    if (child_pid == 0) {
        cout << "This is the child process\n";
    } else if (child_pid > 0) {
        cout << "This is the parent process\n";
    } else {
        perror("Fork failed");
        return 1;
    }

    return 0;
}

(ii)getpid
#include <iostream>
#include <unistd.h>
using namespace std;
int main() {
    cout << "My process ID is " << getpid() << std::endl;
    return 0;
}

(iii)ps

"run in terminal"

ps aux

(iv) kill
#include <iostream>
#include <csignal>
#include <unistd.h>
using namespace std;
int main() {
    pid_t pid = 1435;
    int result = kill(pid, SIGTERM);

    if (result == 0) {
        cout << "Termination signal sent successfully"<<endl;
    } else {
        perror("Kill fail");
        return 1;
    }

    return 0;
}

(v) sleep
#include <iostream>
#include <unistd.h>
using namespace std;
int main() {
    cout << "Sleeping for 3 seconds...\n";
    sleep(3);
    cout << "Woke up!\n";
    return 0;
}



